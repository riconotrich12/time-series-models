print(nnetar_forecast)
plot(nnetar_forecast)
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size = 40, p=3, xreg=seasonal_comp)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size = 40, p=3)
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
plot(nnetar_forecast)
# Print the forecasted values
print(nnetar_forecast)
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
# Print the forecasted values
print(nnetar_forecast)
4
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Perform linear regression
data <- data.frame(fit = nnetar_forecast$fitted, seasonal = seasonal_comp, trend = trend_comp)
lm_result <- lm(fit ~ seasonal + trend, data = data)
# Summary of regression results
summary(lm_result)
# Create a cross-validation control object
ctrl <- trainControl(method = "cv", number = 10)
data <- na.omit(data)
# Perform cross-validation
model <- train(fit ~ seasonal + trend, data = data, method = "lm", trControl = ctrl)
# Access cross-validation results
print(model$results)
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size = 50, p=3)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Perform linear regression
data <- data.frame(fit = nnetar_forecast$fitted, seasonal = seasonal_comp, trend = trend_comp)
lm_result <- lm(fit ~ seasonal + trend, data = data)
# Summary of regression results
summary(lm_result)
# Create a cross-validation control object
ctrl <- trainControl(method = "cv", number = 10)
data <- na.omit(data)
# Perform cross-validation
model <- train(fit ~ seasonal + trend, data = data, method = "lm", trControl = ctrl)
# Access cross-validation results
print(model$results)
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=50, p=3, repeats=10)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Perform linear regression
data <- data.frame(fit = nnetar_forecast$fitted, seasonal = seasonal_comp, trend = trend_comp)
lm_result <- lm(fit ~ seasonal + trend, data = data)
# Summary of regression results
summary(lm_result)
# Create a cross-validation control object
ctrl <- trainControl(method = "cv", number = 10)
data <- na.omit(data)
# Perform cross-validation
model <- train(fit ~ seasonal + trend, data = data, method = "lm", trControl = ctrl)
# Access cross-validation results
print(model$results)
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=50, p=3, repeats=20)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=50, p=3, repeats=5)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=50, p=3, repeats=15)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=50, p=3, repeats=10)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=50, p=3)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=60, p=3, repeats=10)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=90, p=3, repeats=10)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=90, p=3, repeats=50)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=50, p=3, repeats=20)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
nnetar_model <- nnetar(enrollment_ts, size=50, p=3, repeats=10)
nnetar_model
# Forecast future values using the fitted model
nnetar_forecast <- forecast(nnetar_model, h=30, level=c(80,95))
print(nnetar_forecast)
plot(nnetar_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(nnetar_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(nnetar_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(nnetar_forecast$residuals, lag=20, type="Ljung-Box")
hist(nnetar_forecast$residuals)
accuracy_res<-accuracy(nnetar_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Perform linear regression
data <- data.frame(fit = nnetar_forecast$fitted, seasonal = seasonal_comp, trend = trend_comp)
lm_result <- lm(fit ~ seasonal + trend, data = data)
# Summary of regression results
summary(lm_result)
# Create a cross-validation control object
ctrl <- trainControl(method = "cv", number = 10)
data <- na.omit(data)
# Perform cross-validation
model <- train(fit ~ seasonal + trend, data = data, method = "lm", trControl = ctrl)
# Access cross-validation results
print(model$results)
library(readxl)
enrollment_data_final <- read_excel("D:/BACKUP/MIT/Methods of Research in IT/Research Paper/enrollment_data_final.xlsx")
View(enrollment_data_final)
# Import Libraries #
library(ggplot2)
library(forecast)
library(caret)
# Import Dataset #
ds<-enrollment_data_final
ts_data<-ds$total_enrollees
# Create a month variable based on the semester
ds$month <- ifelse(ds$semester == 1, 1,  # September for the first semester
ifelse(ds$semester == 2, 2,  # January for the second semester
ifelse(ds$semester == 3, 3, NA)))  # June for summer
ds$date <- as.Date(paste(ds$year, ds$month, "01", sep = "-"))
# Sort the data frame by Date in ascending order
ds <- ds[order(ds$date), ]
print(ds)
# Create a time series object
enrollment_ts <- ts(ds$total_enrollees,
start = c(min(ds$year), min(ds$month)),
frequency = 3)
plot(enrollment_ts, main="Original Time Series", ylab="Enrollment", xlab="Time")
time_series_df <- data.frame(Date = time(time(enrollment_ts)), Enrollment = as.vector(enrollment_ts))
print(time_series_df)
# Apply Multiplicative Decomposition
decomposed_ts <- decompose(enrollment_ts, type = "multiplicative")
plot(decomposed_ts)
seasonal_comp<-decomposed_ts$seasonal
trend_comp<-decomposed_ts$trend
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts)
ets_model
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
plot(ets_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(ets_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(ets_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(ets_forecast$residuals, lag=20, type="Ljung-Box")
hist(ets_forecast$residuals)
accuracy_res<-accuracy(ets_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Perform linear regression
data <- data.frame(fit = ets_forecast$fitted, seasonal = seasonal_comp, trend = trend_comp)
lm_result <- lm(fit ~ seasonal + trend, data = data)
# Summary of regression results
summary(lm_result)
# Perform linear regression
data <- data.frame(fit = ets_forecast$fitted, seasonal = seasonal_comp, trend = trend_comp)
lm_result <- lm(fit ~ seasonal + trend, data = data)
# Summary of regression results
summary(lm_result)
# Create a cross-validation control object
ctrl <- trainControl(method = "cv", number = 10)
data <- na.omit(data)
# Perform cross-validation
model <- train(fit ~ seasonal + trend, data = data, method = "lm", trControl = ctrl)
# Access cross-validation results
print(model$results)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, beta=0.5, gamma=1)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.01, beta=0.5, gamma=1)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.01, beta=0.5, gamma=0.9)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, alpha=0.01, beta=0.5, gamma=0.9)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.5, gamma=0.9)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.1)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
plot(ets_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(ets_forecast$fitted, lty=2, col="red")
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
plot(ets_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(ets_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(ets_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(ets_forecast$residuals, lag=20, type="Ljung-Box")
hist(ets_forecast$residuals)
accuracy_res<-accuracy(ets_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Perform linear regression
data <- data.frame(fit = ets_forecast$fitted, seasonal = seasonal_comp, trend = trend_comp)
lm_result <- lm(fit ~ seasonal + trend, data = data)
plot(decomposed_ts)
seasonal_comp<-decomposed_ts$seasonal
trend_comp<-decomposed_ts$trend
decomposed_ts
test<-decomposed_ts$random
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5, phi=0.1)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5, phi=0.5)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5, phi=1)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5, phi=2)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5, phi=0.8)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5, phi=0.6)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5, phi=0.9)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
plot(ets_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(ets_forecast$fitted, lty=2, col="red")
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, alpha=0.1, beta=0.1, gamma=0.5)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.5)
ets_model
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=1)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.9)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.1, gamma=0.8)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
plot(ets_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
#Evaluate model's residual correlation and accuracy
acf(ets_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(ets_forecast$residuals, lag=20, type="Ljung-Box")
hist(ets_forecast$residuals)
#Evaluate model's residual correlation and accuracy
acf(ets_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(ets_forecast$residuals, lag=20, type="Ljung-Box")
hist(ets_forecast$residuals)
accuracy_res<-accuracy(ets_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.8, gamma=0.8)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, alpha=0.1, beta=0.5, gamma=0.8)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, gamma=0.8)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, gamma=0.9)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
plot(ets_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(ets_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(ets_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(ets_forecast$residuals, lag=20, type="Ljung-Box")
hist(ets_forecast$residuals)
accuracy_res<-accuracy(ets_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Perform linear regression
data <- data.frame(fit = ets_forecast$fitted, seasonal = seasonal_comp, trend = trend_comp)
lm_result <- lm(fit ~ seasonal + trend, data = data)
accuracy_res<-accuracy(ets_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, gamma=1)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, beta=0.1, gamma=0.9)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, beta=0.5, gamma=0.9)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, beta=0.9, gamma=0.9)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE, beta=0.8, gamma=0.9)
# Fit the NNETAR model to the time series data
ets_model <- ets(enrollment_ts, damped=TRUE)
ets_model
# Forecast future values using the fitted model
ets_forecast <- forecast(ets_model, h=30, level=c(80,95))
print(ets_forecast)
plot(ets_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(ets_forecast$fitted, lty=2, col="red")
#Evaluate model's residual correlation and accuracy
acf(ets_forecast$residuals, lag.max=20, na.action=na.pass)
Box.test(ets_forecast$residuals, lag=20, type="Ljung-Box")
hist(ets_forecast$residuals)
accuracy_res<-accuracy(ets_forecast$fitted, enrollment_ts, d=2, D=3)
accuracy_res
library(readxl)
enrollment_data_final <- read_excel("D:/BACKUP/MIT/Methods of Research in IT/Research Paper/enrollment_data_final.xlsx")
View(enrollment_data_final)
# Import Libraries #
library(ggplot2)
library(forecast)
library(zoo)
library(caret)
# Import Dataset #
ds<-enrollment_data_final
# Format year and semester to create appropriate indexing
ds$month <- ifelse(ds$semester == 1, 1,  # 1 for the first semester
ifelse(ds$semester == 2, 2,  # 2 for the second semester
ifelse(ds$semester == 3, 3, NA)))  # 3 for summer
ds$date <- as.Date(paste(ds$year, ds$month, "01", sep = "-"))
# Sort the data frame by Date in ascending order
ds <- ds[order(ds$date), ]
print(ds)
# Create a time series object
enrollment_ts <- ts(ds$total_enrollees,
start = c(min(ds$year), min(ds$month)),
frequency = 3)
plot(enrollment_ts, main="Original Time Series", ylab="Enrollment", xlab="Time")
time_series_df <- data.frame(Date = time(time(enrollment_ts)), Enrollment = as.vector(enrollment_ts))
print(time_series_df)
# Apply Multiplicative Decomposition
decomposed_ts <- decompose(enrollment_ts, type = "multiplicative")
plot(decomposed_ts)
seasonal_comp<-decomposed_ts$seasonal
trend_comp<-decomposed_ts$trend
# Apply Multiplicative Decomposition
decomposed_ts <- decompose(enrollment_ts, type = "multiplicative")
plot(decomposed_ts)
seasonal_comp<-decomposed_ts$seasonal
trend_comp<-decomposed_ts$trend
# Fit HW Model
HW_model <- HoltWinters(enrollment_ts, beta=0.7, gamma=1) #Beta value of 0.7 and gamma of 1 is the best fit
# Create prediction
HW_pred <- predict(HW_model, 30, prediction.interval = TRUE,
level=0.95)
HW_pred
#Create forecast using the fitted model
HW_forecast <- forecast(HW_model, h=30, level=c(80,95))
plot(HW_forecast, ylab="Total Enrollment", xlim=c(2003.0,2033.0))
lines(HW_forecast$fitted, lty=2, col="red")
print(HW_forecast)
